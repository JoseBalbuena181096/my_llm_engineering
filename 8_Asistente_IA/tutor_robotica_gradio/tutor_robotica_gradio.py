#!/usr/bin/env python3
"""
Tutor de Rob√≥tica con Gradio
Asistente inteligente que ense√±a rob√≥tica, Arduino, electr√≥nica, mecatr√≥nica 
y programaci√≥n a estudiantes de diferentes edades usando una interfaz web con Gradio.

Este script combina:
1. La funcionalidad del tutor de rob√≥tica original
2. Una interfaz web interactiva con Gradio
3. Adaptaci√≥n autom√°tica seg√∫n el nivel educativo seleccionado
4. Chat conversacional con historial
"""

# ============================================================================
# IMPORTACIONES NECESARIAS
# ============================================================================
import os
import gradio as gr
from dotenv import load_dotenv
from openai import OpenAI
from typing import Dict, List, Tuple

# ============================================================================
# CONFIGURACI√ìN INICIAL
# ============================================================================

# Cargar variables de entorno
load_dotenv()
api_key = os.getenv('OPENAI_API_KEY')

# Validar API key
if not api_key or not api_key.startswith('sk-'):
    print("‚ùå Error: OPENAI_API_KEY no configurada correctamente")
    exit(1)

# Configuraci√≥n del modelo
MODEL = 'gpt-5-nano'
openai = OpenAI()

# ============================================================================
# CONFIGURACI√ìN DE NIVELES EDUCATIVOS
# ============================================================================

NIVELES_EDUCATIVOS = {
    "preescolar": {
        "edad": "3-6 a√±os",
        "descripcion": "Nivel inicial con conceptos muy b√°sicos y juegos",
        "vocabulario": "simple",
        "ejemplos": "cotidianos",
        "emoji": "üß∏"
    },
    "primaria": {
        "edad": "6-12 a√±os", 
        "descripcion": "Conceptos b√°sicos con experimentos sencillos",
        "vocabulario": "b√°sico",
        "ejemplos": "pr√°cticos",
        "emoji": "üìö"
    },
    "secundaria": {
        "edad": "12-15 a√±os",
        "descripcion": "Conceptos intermedios con proyectos estructurados", 
        "vocabulario": "t√©cnico b√°sico",
        "ejemplos": "proyectos",
        "emoji": "üî¨"
    },
    "preparatoria": {
        "edad": "15-18 a√±os",
        "descripcion": "Conceptos avanzados con aplicaciones reales",
        "vocabulario": "t√©cnico avanzado", 
        "ejemplos": "profesionales",
        "emoji": "üéì"
    }
}

# ============================================================================
# FUNCIONES AUXILIARES
# ============================================================================

def cargar_prompt_desde_archivo(nivel: str) -> str:
    """Carga el prompt multi-shot desde un archivo externo."""
    try:
        # Obtener el directorio donde est√° ubicado este script
        script_dir = os.path.dirname(os.path.abspath(__file__))
        archivo_prompt = os.path.join(script_dir, "prompts", f"{nivel}.txt")
        
        with open(archivo_prompt, 'r', encoding='utf-8') as file:
            return file.read()
    except FileNotFoundError:
        print(f"‚ö†Ô∏è Archivo de prompt no encontrado: {archivo_prompt}")
        return "No hay ejemplos disponibles para este nivel."
    except Exception as e:
        print(f"‚ùå Error al cargar prompt: {e}")
        return "Error al cargar ejemplos."

def get_system_prompt_multishot(nivel: str, language: str = "Espa√±ol") -> str:
    """Genera el prompt del sistema con ejemplos multi-shot para cada nivel educativo."""
    
    base_prompt = f"""Eres un tutor experto en rob√≥tica, Arduino, electr√≥nica, mecatr√≥nica y programaci√≥n. 
Tu especialidad es adaptar tu ense√±anza al nivel educativo del estudiante.

NIVEL ACTUAL: {nivel.upper()} ({NIVELES_EDUCATIVOS[nivel]['edad']})
CARACTER√çSTICAS DEL NIVEL:
- {NIVELES_EDUCATIVOS[nivel]['descripcion']}
- Vocabulario: {NIVELES_EDUCATIVOS[nivel]['vocabulario']}
- Tipo de ejemplos: {NIVELES_EDUCATIVOS[nivel]['ejemplos']}

INSTRUCCIONES GENERALES:
1. Adapta tu lenguaje al nivel de edad especificado
2. Usa analog√≠as y ejemplos apropiados para la edad
3. Incluye emojis para hacer m√°s atractiva la explicaci√≥n
4. Proporciona ejemplos pr√°cticos cuando sea posible
5. Fomenta la curiosidad y el aprendizaje activo
6. Responde en formato Markdown para mejor legibilidad
7. Mant√©n un tono amigable y motivador
8. Si no sabes algo, adm√≠telo y sugiere c√≥mo encontrar la respuesta

EJEMPLOS DE RESPUESTAS MULTI-SHOT PARA NIVEL {nivel.upper()}:"""

    # Cargar ejemplos desde archivo externo
    ejemplos = cargar_prompt_desde_archivo(nivel)
    
    # Agregar configuraci√≥n de idioma
    language_config = f"""

CONFIGURACI√ìN DE IDIOMA:
- TODAS las respuestas deben generarse en {language}
- Mant√©n el formato Markdown y los emojis
- Adapta las expresiones culturalmente al idioma seleccionado
- Los t√©rminos t√©cnicos pueden mantenerse en ingl√©s si es est√°ndar internacional
"""

    return base_prompt + ejemplos + language_config

# ============================================================================
# CLASE PRINCIPAL DEL TUTOR PARA GRADIO
# ============================================================================

class TutorRoboticaGradio:
    """
    Clase del tutor de rob√≥tica adaptada para funcionar con Gradio.
    Maneja el estado del chat y la configuraci√≥n del nivel educativo.
    """
    
    def __init__(self):
        """Inicializa el tutor con configuraci√≥n por defecto."""
        self.nivel_actual = "primaria"
        self.language = "Espa√±ol"
        self.system_prompt = get_system_prompt_multishot(self.nivel_actual, self.language)
    
    def cambiar_nivel(self, nuevo_nivel: str) -> str:
        """
        Cambia el nivel educativo del tutor.
        
        Args:
            nuevo_nivel (str): Nuevo nivel educativo
            
        Returns:
            str: Mensaje de confirmaci√≥n del cambio
        """
        if nuevo_nivel not in NIVELES_EDUCATIVOS:
            return f"‚ùå Nivel '{nuevo_nivel}' no v√°lido."
        
        self.nivel_actual = nuevo_nivel
        self.system_prompt = get_system_prompt_multishot(nuevo_nivel, self.language)
        
        emoji = NIVELES_EDUCATIVOS[nuevo_nivel]['emoji']
        edad = NIVELES_EDUCATIVOS[nuevo_nivel]['edad']
        descripcion = NIVELES_EDUCATIVOS[nuevo_nivel]['descripcion']
        
        return f"""ü§ñ **Tutor de Rob√≥tica Actualizado**

{emoji} **Nivel:** {nuevo_nivel.title()} ({edad})
üìù **Caracter√≠sticas:** {descripcion}

¬°Listo para ayudarte con rob√≥tica, Arduino, electr√≥nica y programaci√≥n! üöÄ

¬øQu√© te gustar√≠a aprender hoy?"""
    
    def cambiar_idioma(self, nuevo_idioma: str) -> str:
        """
        Cambia el idioma de las respuestas del tutor.
        
        Args:
            nuevo_idioma (str): Nuevo idioma para las respuestas
            
        Returns:
            str: Mensaje de confirmaci√≥n del cambio
        """
        self.language = nuevo_idioma
        self.system_prompt = get_system_prompt_multishot(self.nivel_actual, nuevo_idioma)
        
        # Mensajes de confirmaci√≥n en diferentes idiomas
        mensajes = {
            "Espa√±ol": f"üåç **Idioma cambiado a Espa√±ol**\n\n¬°Ahora responder√© en espa√±ol! ¬øEn qu√© puedo ayudarte?",
            "English": f"üåç **Language changed to English**\n\nI will now respond in English! How can I help you?",
            "Fran√ßais": f"üåç **Langue chang√©e en Fran√ßais**\n\nJe vais maintenant r√©pondre en fran√ßais ! Comment puis-je vous aider ?",
            "Portugu√™s": f"üåç **Idioma alterado para Portugu√™s**\n\nAgora vou responder em portugu√™s! Como posso ajud√°-lo?",
            "Italiano": f"üåç **Lingua cambiata in Italiano**\n\nOra risponder√≤ in italiano! Come posso aiutarti?",
            "Êó•Êú¨Ë™û": f"üåç **Ë®ÄË™û„ÅåÊó•Êú¨Ë™û„Å´Â§âÊõ¥„Åï„Çå„Åæ„Åó„Åü**\n\n„Åì„Çå„Åã„ÇâÊó•Êú¨Ë™û„Åß„ÅäÁ≠î„Åà„Åó„Åæ„Åô„ÄÇ„ÅîË≥™Âïè„ÅØ„ÅÇ„Çä„Åæ„Åô„ÅãÔºü",
            "Deutsch": f"üåç **Sprache auf Deutsch ge√§ndert**\n\nIch antworte jetzt auf Deutsch! Wie kann ich dir helfen?",
            "‰∏≠Êñá": f"üåç **ËØ≠Ë®ÄÂ∑≤ÂàáÊç¢‰∏∫‰∏≠Êñá**\n\nÊàëÁé∞Âú®Â∞ÜÁî®‰∏≠ÊñáÂõûÁ≠îÔºÅÊàëËÉΩÂ∏Æ‰Ω†‰ªÄ‰πàÔºü"
        }
        
        return mensajes.get(nuevo_idioma, f"üåç **Language changed to {nuevo_idioma}**\n\nI will now respond in {nuevo_idioma}! How can I help you?")
    
    def chat(self, message: str, history: List) -> str:
        """
        Funci√≥n principal de chat que responde a los mensajes del usuario.
        
        Args:
            message (str): Mensaje del usuario
            history (List): Historial de la conversaci√≥n
            
        Yields:
            str: Respuesta del tutor en streaming
        """
        # Preparar mensajes para OpenAI
        messages = [{"role": "system", "content": self.system_prompt}] + history + [{"role": "user", "content": message}]
        
        try:
            # Llamada a OpenAI con streaming
            stream = openai.chat.completions.create(
                model=MODEL,
                messages=messages,
                stream=True,
                max_completion_tokens=5000
            )
            
            # Procesar respuesta en streaming
            response = ""
            for chunk in stream:
                if chunk.choices[0].delta.content:
                    content = chunk.choices[0].delta.content
                    response += content
                    yield response
                    
        except Exception as e:
            error_msg = f"‚ùå Error al procesar tu pregunta: {str(e)}\n\nPor favor, intenta de nuevo o reformula tu pregunta."
            yield error_msg

# ============================================================================
# INSTANCIA GLOBAL DEL TUTOR
# ============================================================================

# Crear instancia global del tutor
tutor = TutorRoboticaGradio()

# ============================================================================
# FUNCIONES PARA LA INTERFAZ DE GRADIO
# ============================================================================

def cambiar_nivel_interface(nivel_seleccionado: str) -> Tuple[str, List]:
    """
    Funci√≥n para cambiar el nivel desde la interfaz de Gradio.
    
    Args:
        nivel_seleccionado (str): Nivel seleccionado por el usuario
        
    Returns:
        Tuple[str, List]: Mensaje de confirmaci√≥n y historial limpio
    """
    mensaje_confirmacion = tutor.cambiar_nivel(nivel_seleccionado)
    return mensaje_confirmacion, []  # Limpiar historial al cambiar nivel

def obtener_info_nivel_actual() -> str:
    """Obtiene informaci√≥n del nivel actual."""
    nivel = tutor.nivel_actual
    info = NIVELES_EDUCATIVOS[nivel]
    
    return f"""üìä **Configuraci√≥n Actual**

{info['emoji']} **Nivel:** {nivel.title()} ({info['edad']})
üìù **Descripci√≥n:** {info['descripcion']}
üó£Ô∏è **Vocabulario:** {info['vocabulario']}
üí° **Ejemplos:** {info['ejemplos']}
üåç **Idioma:** {tutor.language}

¬°Listo para ayudarte con rob√≥tica y electr√≥nica! üöÄ"""

def obtener_ejemplos_preguntas(nivel: str) -> str:
    """Obtiene ejemplos de preguntas para cada nivel."""
    ejemplos = {
        "preescolar": [
            "¬øQu√© es un robot?",
            "¬øC√≥mo se enciende una luz?",
            "¬øPor qu√© se mueven los carros de juguete?",
            "¬øQu√© hace que suene un timbre?"
        ],
        "primaria": [
            "¬øC√≥mo funciona un LED?",
            "¬øQu√© es Arduino?",
            "¬øC√≥mo hacer que un motor gire?",
            "¬øQu√© es un sensor de temperatura?"
        ],
        "secundaria": [
            "¬øC√≥mo programar un Arduino?",
            "¬øQu√© es PWM y para qu√© sirve?",
            "¬øC√≥mo funciona un servo motor?",
            "¬øC√≥mo hacer un robot que siga l√≠neas?"
        ],
        "preparatoria": [
            "¬øC√≥mo implementar PID en rob√≥tica?",
            "¬øQu√© es la comunicaci√≥n I2C?",
            "¬øC√≥mo dise√±ar un sistema de control?",
            "¬øC√≥mo integrar sensores IoT?"
        ]
    }
    
    lista_ejemplos = ejemplos.get(nivel, [])
    ejemplos_texto = "\n".join([f"‚Ä¢ {ejemplo}" for ejemplo in lista_ejemplos])
    
    return f"""üí° **Ejemplos de preguntas para {nivel.title()}:**

{ejemplos_texto}

¬°Puedes hacer cualquiera de estas preguntas o crear las tuyas propias!"""

# ============================================================================
# CREAR INTERFAZ DE GRADIO
# ============================================================================

def crear_interfaz():
    """Crea y configura la interfaz de Gradio."""
    
    # CSS personalizado para mejorar la apariencia
    css = """
    .gradio-container {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }
    .nivel-info {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 15px;
        border-radius: 10px;
        margin: 10px 0;
    }
    .chat-container {
        max-height: 600px;
        overflow-y: auto;
    }
    """
    
    with gr.Blocks(css=css, title="ü§ñ Tutor de Rob√≥tica", theme=gr.themes.Soft()) as demo:
        
        # T√≠tulo principal
        gr.Markdown("""
        # ü§ñ Tutor de Rob√≥tica Inteligente
        
        ### ¬°Aprende rob√≥tica, Arduino, electr√≥nica y programaci√≥n de forma divertida! üöÄ
        
        **Selecciona tu nivel educativo y comienza a hacer preguntas sobre:**
        - üîß Arduino y microcontroladores
        - ‚ö° Electr√≥nica b√°sica y avanzada  
        - ü§ñ Rob√≥tica y automatizaci√≥n
        - üíª Programaci√≥n para robots
        - üî© Mecatr√≥nica y sensores
        """)
        
        with gr.Row():
            with gr.Column(scale=1):
                # Panel de configuraci√≥n
                gr.Markdown("## ‚öôÔ∏è Configuraci√≥n")
                
                nivel_dropdown = gr.Dropdown(
                    choices=list(NIVELES_EDUCATIVOS.keys()),
                    value="primaria",
                    label="üìö Selecciona tu nivel educativo",
                    info="El tutor adaptar√° sus explicaciones a tu edad"
                )
                
                idioma_dropdown = gr.Dropdown(
                    choices=["Espa√±ol", "English", "Fran√ßais", "Portugu√™s", "Italiano", "Êó•Êú¨Ë™û", "Deutsch", "‰∏≠Êñá"],
                    value="Espa√±ol",
                    label="üåç Idioma",
                    info="Selecciona el idioma para las respuestas"
                )
                
                info_nivel = gr.Markdown(obtener_info_nivel_actual())
                
                ejemplos_btn = gr.Button("üí° Ver ejemplos de preguntas", variant="secondary")
                ejemplos_output = gr.Markdown("")
                
            with gr.Column(scale=2):
                # Panel de chat
                gr.Markdown("## üí¨ Chat con el Tutor")
                
                chatbot = gr.Chatbot(
                    height=500,
                    show_label=False,
                    container=True,
                    bubble_full_width=False
                )
                
                msg = gr.Textbox(
                    placeholder="Escribe tu pregunta sobre rob√≥tica, Arduino, electr√≥nica...",
                    label="Tu pregunta",
                    lines=2
                )
                
                with gr.Row():
                    enviar_btn = gr.Button("üì§ Enviar", variant="primary")
                    limpiar_btn = gr.Button("üóëÔ∏è Limpiar chat", variant="secondary")
        
        # Eventos de la interfaz
        def responder_usuario(message, history):
            """Funci√≥n que maneja la respuesta del tutor."""
            return "", history + [[message, ""]]
        
        def generar_respuesta(history):
            """Funci√≥n que genera la respuesta del tutor."""
            if history:
                user_message = history[-1][0]
                history[-1][1] = ""
                
                # Convertir historial de Gradio a formato OpenAI
                openai_history = []
                for user_msg, assistant_msg in history[:-1]:
                    if user_msg:
                        openai_history.append({"role": "user", "content": user_msg})
                    if assistant_msg:
                        openai_history.append({"role": "assistant", "content": assistant_msg})
                
                # Generar respuesta en streaming
                for response in tutor.chat(user_message, openai_history):
                    history[-1][1] = response
                    yield history
        
        # Configurar eventos
        msg.submit(responder_usuario, [msg, chatbot], [msg, chatbot]).then(
            generar_respuesta, chatbot, chatbot
        )
        
        enviar_btn.click(responder_usuario, [msg, chatbot], [msg, chatbot]).then(
            generar_respuesta, chatbot, chatbot
        )
        
        limpiar_btn.click(lambda: ([], ""), outputs=[chatbot, msg])
        
        nivel_dropdown.change(
            cambiar_nivel_interface, 
            inputs=[nivel_dropdown], 
            outputs=[info_nivel, chatbot]
        )
        
        idioma_dropdown.change(
            lambda idioma: tutor.cambiar_idioma(idioma),
            inputs=[idioma_dropdown],
            outputs=[info_nivel]
        )
        
        ejemplos_btn.click(
            lambda nivel: obtener_ejemplos_preguntas(nivel),
            inputs=[nivel_dropdown],
            outputs=[ejemplos_output]
        )
        
        # Informaci√≥n adicional en el pie
        gr.Markdown("""
        ---
        ### üìã Instrucciones de uso:
        1. **Selecciona tu nivel educativo** en el panel izquierdo
        2. **Haz preguntas** sobre rob√≥tica, Arduino, electr√≥nica, programaci√≥n, etc.
        3. **El tutor adaptar√°** sus respuestas a tu edad y nivel de conocimiento
        4. **Explora diferentes temas** y no tengas miedo de preguntar
        
        ### üéØ Temas que puedes explorar:
        - Conceptos b√°sicos de rob√≥tica y electr√≥nica
        - Programaci√≥n de Arduino y microcontroladores  
        - Sensores, actuadores y componentes electr√≥nicos
        - Proyectos pr√°cticos paso a paso
        - Resoluci√≥n de problemas t√©cnicos
        
        **¬°Divi√©rtete aprendiendo! üöÄ**
        """)
    
    return demo

# ============================================================================
# FUNCI√ìN PRINCIPAL
# ============================================================================

def main():
    """Funci√≥n principal que lanza la aplicaci√≥n."""
    print("ü§ñ Iniciando Tutor de Rob√≥tica con Gradio...")
    print(f"üìö Niveles disponibles: {list(NIVELES_EDUCATIVOS.keys())}")
    print(f"üåç Idioma: {tutor.language}")
    print("üöÄ Creando interfaz...")
    
    # Crear y lanzar la interfaz
    demo = crear_interfaz()
    
    # Lanzar la aplicaci√≥n
    demo.launch(
        server_name="127.0.0.1",
        server_port=7860,
        share=True,
        show_error=True,
        quiet=False
    )

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\nüëã ¬°Hasta luego! Gracias por usar el Tutor de Rob√≥tica ü§ñ‚ú®")
    except Exception as e:
        print(f"\n‚ùå Error inesperado: {e}")
        print("Por favor, verifica tu configuraci√≥n y vuelve a intentar.")