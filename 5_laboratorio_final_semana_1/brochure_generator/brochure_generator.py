#!/usr/bin/env python3
"""
Generador de Folletos Empresariales
Script extra√≠do del notebook day5.ipynb que genera folletos para empresas
bas√°ndose en el an√°lisis de sus sitios web.

Este script utiliza web scraping y OpenAI GPT para:
1. Analizar el contenido de un sitio web empresarial
2. Identificar enlaces relevantes autom√°ticamente
3. Extraer informaci√≥n de m√∫ltiples p√°ginas
4. Generar un folleto profesional en formato Markdown
"""

# ============================================================================
# IMPORTACIONES NECESARIAS
# ============================================================================
import os                    # Para variables de entorno
import requests             # Para realizar peticiones HTTP a sitios web
import json                 # Para manejar respuestas JSON de OpenAI
from dotenv import load_dotenv      # Para cargar variables de entorno desde .env
from bs4 import BeautifulSoup       # Para parsear y extraer contenido HTML
from openai import OpenAI           # Cliente oficial de OpenAI

# ============================================================================
# CONFIGURACI√ìN INICIAL Y VALIDACI√ìN
# ============================================================================

# Cargar variables de entorno desde el archivo .env
load_dotenv()
api_key = os.getenv('OPENAI_API_KEY')

# Validar que la clave API de OpenAI est√© configurada correctamente
if api_key and api_key[:8] == 'sk-proj-':
    print("‚úì La clave de API parece buena")
else:
    print("‚ùå Puede haber un problema con tu clave API")
    exit(1)  # Terminar el programa si no hay API key v√°lida

# Configuraci√≥n del modelo de OpenAI a utilizar
MODEL = 'gpt-5-nano'   # Modelo eficiente y econ√≥mico para esta tarea
openai = OpenAI()      # Inicializar el cliente de OpenAI

# ============================================================================
# CLASE PARA MANEJO DE SITIOS WEB
# ============================================================================

class Website:
    """
    Clase utilitaria para representar y procesar un sitio web.
    
    Esta clase se encarga de:
    - Descargar el contenido HTML de una URL
    - Extraer el texto limpio (sin scripts, estilos, etc.)
    - Obtener todos los enlaces de la p√°gina
    - Proporcionar m√©todos para acceder al contenido procesado
    """

    def __init__(self, url):
        """
        Constructor que inicializa el objeto Website.
        
        Args:
            url (str): La URL del sitio web a procesar
        """
        self.url = url
        
        # Realizar petici√≥n HTTP para obtener el contenido de la p√°gina
        response = requests.get(url)
        self.body = response.content
        
        # Crear objeto BeautifulSoup para parsear el HTML
        soup = BeautifulSoup(self.body, 'html.parser')
        
        # Extraer el t√≠tulo de la p√°gina (si existe)
        self.title = soup.title.string if soup.title else "Sin t√≠tulo"
        
        # Procesar el contenido del body
        if soup.body:
            # Eliminar elementos irrelevantes para el an√°lisis de texto
            for irrelevant in soup.body(["script", "style", "img", "input"]):
                irrelevant.decompose()  # Remover completamente estos elementos
            
            # Extraer texto limpio con saltos de l√≠nea como separadores
            self.text = soup.body.get_text(separator="\n", strip=True)
        else:
            self.text = ""
        
        # Extraer todos los enlaces (href) de la p√°gina
        links = [link.get('href') for link in soup.find_all('a')]
        # Filtrar enlaces vac√≠os o None
        self.links = [link for link in links if link]

    def get_contents(self):
        """
        M√©todo que devuelve el contenido formateado de la p√°gina.
        
        Returns:
            str: T√≠tulo y contenido de la p√°gina en formato legible
        """
        return f"T√≠tulo de la Web:\n{self.title}\nContenido de la Web:\n{self.text}\n\n"

# ============================================================================
# PROMPTS DEL SISTEMA PARA OPENAI
# ============================================================================

# Prompt para que GPT identifique enlaces relevantes
# Prompt mejorado con multi-shot prompting para identificar enlaces relevantes
link_system_prompt = """Se te proporciona una lista de enlaces que se encuentran en una p√°gina web. \
Puedes decidir cu√°les de los enlaces ser√≠an los m√°s relevantes para incluir en un folleto sobre la empresa, \
como enlaces a una p√°gina Acerca de, una p√°gina de la empresa, las carreras/empleos disponibles o p√°ginas de Cursos/Packs.

Debes responder en JSON siguiendo estos ejemplos:

Ejemplo 1 - Empresa de tecnolog√≠a:
{
    "links": [
        {"type": "Pagina Sobre nosotros", "url": "https://techcorp.com/about-us"},
        {"type": "Pagina de Servicios", "url": "https://techcorp.com/services"},
        {"type": "Pagina de Carreras", "url": "https://techcorp.com/careers"}
    ]
}

Ejemplo 2 - Empresa educativa:
{
    "links": [
        {"type": "Pagina Sobre nosotros", "url": "https://educacion.com/nosotros"},
        {"type": "Pagina de Cursos", "url": "https://educacion.com/cursos"},
        {"type": "Pagina de Testimonios", "url": "https://educacion.com/testimonios"},
        {"type": "Pagina de Contacto", "url": "https://educacion.com/contacto"}
    ]
}

Ejemplo 3 - Empresa de consultor√≠a:
{
    "links": [
        {"type": "Pagina de Servicios", "url": "https://consultora.com/servicios"},
        {"type": "Pagina de Equipo", "url": "https://consultora.com/equipo"},
        {"type": "Pagina de Casos de Exito", "url": "https://consultora.com/casos-exito"}
    ]
}
"""

# Prompt para que GPT genere el folleto empresarial
# Prompt mejorado para que GPT genere el folleto empresarial con formato espec√≠fico
system_prompt = """Eres un asistente especializado que analiza el contenido de varias p√°ginas relevantes del sitio web de una empresa \
y crea un folleto profesional y atractivo para posibles clientes, inversores y nuevos empleados.

DEBES seguir EXACTAMENTE esta estructura en formato Markdown:

# üè¢ [Nombre de la Empresa]

## üìã Resumen Ejecutivo
- Breve descripci√≥n de la empresa (2-3 l√≠neas)
- Sector/industria principal
- A√±o de fundaci√≥n (si est√° disponible)

## üéØ Misi√≥n y Visi√≥n
### Misi√≥n
[Descripci√≥n de la misi√≥n de la empresa]

### Visi√≥n
[Descripci√≥n de la visi√≥n de la empresa]

## üöÄ Servicios y Productos Principales
- **Servicio/Producto 1**: Descripci√≥n breve
- **Servicio/Producto 2**: Descripci√≥n breve
- **Servicio/Producto 3**: Descripci√≥n breve

## üìö Cursos y Formaci√≥n (si aplica)
### Cursos Destacados:
- **Curso 1**: Descripci√≥n y duraci√≥n
- **Curso 2**: Descripci√≥n y duraci√≥n
- **Curso 3**: Descripci√≥n y duraci√≥n

### Modalidades de Estudio:
- Presencial / Online / H√≠brido

## üë• Cultura Empresarial y Valores
- **Valor 1**: Descripci√≥n
- **Valor 2**: Descripci√≥n  
- **Valor 3**: Descripci√≥n

## üéì Oportunidades de Carrera
### √Åreas de Trabajo:
- √Årea 1
- √Årea 2
- √Årea 3

### Beneficios para Empleados:
- Beneficio 1
- Beneficio 2
- Beneficio 3

## üåü Testimonios y Casos de √âxito
> "Testimonio de cliente/estudiante destacado"
> 
> ‚Äî Nombre del Cliente/Estudiante

## üìû Informaci√≥n de Contacto
- **Sitio Web**: [URL]
- **Email**: [si est√° disponible]
- **Tel√©fono**: [si est√° disponible]
- **Direcci√≥n**: [si est√° disponible]

---
*Folleto generado autom√°ticamente basado en an√°lisis web*

INSTRUCCIONES IMPORTANTES:
1. Usa emojis para hacer el folleto m√°s atractivo visualmente
2. Si no tienes informaci√≥n para una secci√≥n, escribe "Informaci√≥n no disponible en el sitio web"
3. Mant√©n un tono profesional pero accesible
4. Prioriza la informaci√≥n m√°s relevante y espec√≠fica
5. Usa listas con vi√±etas para facilitar la lectura
6. Incluye citas textuales cuando sea posible para testimonios"""

# ============================================================================
# FUNCIONES PARA CONFIGURACI√ìN DE IDIOMA
# ============================================================================

def set_output_language(base_prompt, language="Espa√±ol"):
    """
    Integra la configuraci√≥n de idioma directamente en el prompt del sistema.
    
    Esta funci√≥n modifica el prompt base para incluir instrucciones espec√≠ficas
    sobre el idioma de salida, asegurando que toda la respuesta del LLM
    se genere en el idioma especificado.
    
    Args:
        base_prompt (str): El prompt del sistema base
        language (str): Idioma deseado para la respuesta (por defecto: "Espa√±ol")
        
    Returns:
        str: Prompt del sistema modificado con instrucciones de idioma
    """
    language_instruction = f"""

CONFIGURACI√ìN DE IDIOMA:
- TODOS los textos, t√≠tulos, descripciones y contenido DEBEN generarse en {language}
- Mant√©n la estructura y formato Markdown, pero traduce TODO el contenido
- Si el idioma es diferente al espa√±ol, adapta tambi√©n los emojis y expresiones culturalmente apropiadas
- Los nombres propios de empresas y marcas se mantienen en su idioma original
"""
    
    return base_prompt + language_instruction

# ============================================================================
# FUNCIONES PARA PROCESAMIENTO DE ENLACES
# ============================================================================

def get_links_user_prompt(website):
    """
    Genera el prompt del usuario para obtener enlaces relevantes.
    
    Esta funci√≥n crea un mensaje que se enviar√° a GPT con la lista de enlaces
    encontrados en el sitio web, pidiendo que identifique cu√°les son relevantes.
    
    Args:
        website (Website): Objeto Website con los enlaces extra√≠dos
        
    Returns:
        str: Prompt formateado para enviar a OpenAI
    """
    user_prompt = f"Aqu√≠ hay una lista de enlaces de la p√°gina web {website.url} - "
    user_prompt += "Por favor, decide cu√°les de estos son enlaces web relevantes para un folleto sobre la empresa. Responde con la URL https completa en formato JSON. \
No incluyas T√©rminos y Condiciones, Privacidad ni enlaces de correo electr√≥nico.\n"
    user_prompt += "Links (puede que algunos sean links relativos):\n"
    user_prompt += "\n".join(website.links)  # Unir todos los enlaces con saltos de l√≠nea
    return user_prompt


def get_links(url):
    """
    Obtiene los enlaces relevantes de un sitio web usando OpenAI.
    
    Esta funci√≥n:
    1. Crea un objeto Website para la URL dada
    2. Env√≠a los enlaces a GPT para que identifique los relevantes
    3. Devuelve la respuesta en formato JSON
    
    Args:
        url (str): URL del sitio web a analizar
        
    Returns:
        dict: Diccionario con los enlaces relevantes identificados por GPT
    """
    website = Website(url)
    
    # Realizar llamada a OpenAI para identificar enlaces relevantes
    response = openai.chat.completions.create(
        model=MODEL,
        messages=[
            {"role": "system", "content": link_system_prompt},
            {"role": "user", "content": get_links_user_prompt(website)}
        ],
        response_format={"type": "json_object"}  # Forzar respuesta en JSON
    )
    
    # Extraer y parsear la respuesta JSON
    result = response.choices[0].message.content
    return json.loads(result)

# ============================================================================
# FUNCIONES PARA RECOPILACI√ìN DE INFORMACI√ìN
# ============================================================================

def get_all_details(url):
    """
    Recopila todos los detalles de la p√°gina principal y enlaces relevantes.
    
    Esta funci√≥n:
    1. Obtiene el contenido de la p√°gina principal
    2. Identifica enlaces relevantes usando GPT
    3. Visita cada enlace relevante y extrae su contenido
    4. Combina toda la informaci√≥n en un solo texto
    
    Args:
        url (str): URL del sitio web principal
        
    Returns:
        str: Texto combinado con toda la informaci√≥n recopilada
    """
    # Comenzar con el contenido de la p√°gina principal
    result = "Landing page:\n"
    result += Website(url).get_contents()
    
    # Obtener enlaces relevantes usando GPT
    links = get_links(url)
    print("Links encontrados:", links)  # Mostrar enlaces para debugging
    
    # Procesar cada enlace relevante
    for link in links["links"]:
        try:
            # Agregar secci√≥n para este enlace
            result += f"\n\n{link['type']}\n"
            # Obtener y agregar el contenido de este enlace
            result += Website(link["url"]).get_contents()
        except Exception as e:
            # Manejar errores (enlaces rotos, timeouts, etc.)
            print(f"Error procesando {link['url']}: {e}")
            continue  # Continuar con el siguiente enlace
    
    return result


def get_brochure_user_prompt(company_name, url):
    """
    Genera el prompt del usuario para crear el folleto.
    
    Esta funci√≥n combina el nombre de la empresa con toda la informaci√≥n
    recopilada del sitio web para crear un prompt completo para GPT.
    
    Args:
        company_name (str): Nombre de la empresa
        url (str): URL del sitio web de la empresa
        
    Returns:
        str: Prompt completo para generar el folleto
    """
    user_prompt = f"Est√°s mirando una empresa llamada: {company_name}\n"
    user_prompt += f"Aqu√≠ se encuentra el contenido de su p√°gina de inicio y otras p√°ginas relevantes; usa esta informaci√≥n para crear un breve folleto de la empresa en Markdown.\n"
    
    # Agregar toda la informaci√≥n recopilada
    user_prompt += get_all_details(url)
    
    # Truncar si es muy largo para evitar l√≠mites de tokens
    user_prompt = user_prompt[:20_000]  # M√°ximo 20,000 caracteres
    return user_prompt

def change_language_prompt(language):
    """
    Genera un prompt para cambiar el idioma de la respuesta.
    
    Args:
        language (str): Idioma deseado para la respuesta
        
    Returns:
        str: Prompt formateado para cambiar el idioma
    """
    return f"Por favor, genera todos tus resultados en el idioma {language}."

# ============================================================================
# FUNCI√ìN PRINCIPAL PARA GENERAR FOLLETOS
# ============================================================================

def stream_brochure(company_name, url, language="Espa√±ol"):
    """
    Genera un folleto empresarial con streaming de respuesta.
    
    Esta es la funci√≥n principal que:
    1. Recopila informaci√≥n del sitio web
    2. Env√≠a todo a GPT para generar el folleto
    3. Muestra la respuesta en tiempo real (streaming)
    4. Devuelve el texto completo del folleto
    
    Args:
        company_name (str): Nombre de la empresa
        url (str): URL del sitio web de la empresa
        language (str): Idioma para generar el folleto (por defecto: "Espa√±ol")
        
    Returns:
        str: Texto completo del folleto generado, o None si hay error
    """
    print(f"üöÄ Generando folleto para {company_name}...")
    print(f"üìä Analizando sitio web: {url}")
    print(f"üåç Idioma de salida: {language}")
    
    try:
        # Crear el prompt del sistema con configuraci√≥n de idioma integrada
        localized_system_prompt = set_output_language(system_prompt, language)
        
        # Crear stream de respuesta de OpenAI
        stream = openai.chat.completions.create(
            model=MODEL,
            messages=[
                {"role": "system", "content": localized_system_prompt},
                {"role": "user", "content": get_brochure_user_prompt(company_name, url)}
            ],
            stream=True  # Habilitar streaming para mostrar respuesta en tiempo real
        )
        
        # Mostrar encabezado
        print(f"\nüìÑ Folleto para {company_name}:")
        print("=" * 50)
        
        # Procesar y mostrar la respuesta en tiempo real
        response = ""
        for chunk in stream:
            # Verificar si el chunk contiene contenido
            if chunk.choices[0].delta.content:
                content = chunk.choices[0].delta.content
                response += content  # Acumular respuesta completa
                print(content, end='', flush=True)  # Mostrar inmediatamente
        
        # Mostrar mensaje de finalizaci√≥n
        print("\n" + "=" * 50)
        print("‚úÖ Folleto generado exitosamente!")
        
        return response
        
    except Exception as e:
        # Manejar cualquier error durante la generaci√≥n
        print(f"‚ùå Error generando el folleto: {e}")
        return None

# ============================================================================
# FUNCIONES AUXILIARES PARA USO PERSONALIZADO
# ============================================================================

def generate_custom_brochure(company_name, url, language="Espa√±ol", output_file=None):
    """
    Funci√≥n auxiliar para generar folletos con par√°metros personalizados.
    
    Esta funci√≥n permite usar el generador de folletos con par√°metros espec√≠ficos
    sin modificar la funci√≥n main, ideal para uso program√°tico o desde otros scripts.
    
    Args:
        company_name (str): Nombre de la empresa
        url (str): URL del sitio web de la empresa
        language (str): Idioma para generar el folleto (por defecto: "Espa√±ol")
        output_file (str): Nombre del archivo de salida (opcional)
        
    Returns:
        tuple: (resultado_texto, nombre_archivo) o (None, None) si hay error
    """
    print("üè¢ Generador de Folletos Empresariales - Modo Personalizado")
    print("=" * 55)
    
    # Generar el folleto con los par√°metros especificados
    result = stream_brochure(company_name, url, language)
    
    # Si la generaci√≥n fue exitosa, guardar en archivo
    if result:
        # Determinar el nombre del archivo de salida
        if output_file is None:
            language_suffix = f"_{language.lower()}" if language != "Espa√±ol" else ""
            output_file = f"folleto_{company_name.replace(' ', '_').lower()}{language_suffix}.md"
        
        # Guardar el folleto en archivo Markdown
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(f"# Folleto Empresarial: {company_name}\n\n")
            f.write(result)
        
        print(f"\nüíæ Folleto guardado en: {output_file}")
        return result, output_file
    else:
        return None, None

# ============================================================================
# FUNCI√ìN PRINCIPAL DEL PROGRAMA
# ============================================================================

def main(language="Espa√±ol"):
    """
    Funci√≥n principal del script.
    
    Esta funci√≥n:
    1. Muestra el t√≠tulo del programa
    2. Define los par√°metros de la empresa a analizar
    3. Ejecuta la generaci√≥n del folleto
    4. Guarda el resultado en un archivo Markdown
    
    Args:
        language (str): Idioma para generar el folleto (por defecto: "Espa√±ol")
    """
    print("üè¢ Generador de Folletos Empresariales")
    print("=" * 40)
    
    # Configuraci√≥n de la empresa a analizar
    # (Puedes cambiar estos valores para analizar otras empresas)
    company_name = "Frogames Formaci√≥n"
    url = "https://cursos.frogamesformacion.com"
    
    # Generar el folleto con el idioma especificado
    result = stream_brochure(company_name, url, language)
    
    # Si la generaci√≥n fue exitosa, guardar en archivo
    if result:
        # Crear nombre de archivo basado en el nombre de la empresa y el idioma
        language_suffix = f"_{language.lower()}" if language != "Espa√±ol" else ""
        output_file = f"folleto_{company_name.replace(' ', '_').lower()}{language_suffix}.md"
        
        # Guardar el folleto en archivo Markdown
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(f"# Folleto Empresarial: {company_name}\n\n")
            f.write(result)
        
        print(f"\nüíæ Folleto guardado en: {output_file}")

# ============================================================================
# PUNTO DE ENTRADA DEL PROGRAMA
# ============================================================================

if __name__ == "__main__":
    """
    Punto de entrada del script.
    
    Esta condici√≥n asegura que main() solo se ejecute cuando el script
    se ejecuta directamente (no cuando se importa como m√≥dulo).
    """
    main()